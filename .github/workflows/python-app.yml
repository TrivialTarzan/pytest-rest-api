# GitHub Actions workflow to test a Python REST API project with Pytest and Ruff

name: pytest-rest-api

# Trigger on push and pull request events to the 'main' branch
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ["pypy3.10", "3.9", "3.10", "3.11", "3.12", "3.13"]

    steps:
    - name: List files in the repository
      run: |
        ls ${{ github.workspace }}

    # Check out the code from the repository
    - uses: actions/checkout@v4

    # Set up the specified Python version
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Display Python version
      run: python -c "import sys; print(sys.version)"

    # Installing dependencies
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    # Installing Ruff using pip
    - name: Install Ruff
      run: python -m pip install ruff

    # Running Ruff linting (checks code quality and static analysis issues)
    - name: Lint code with Ruff
      run: ruff check --output-format=github --target-version=py39

    # Checking code formatting with Ruff - will not fail the build
    - name: Check code formatting with Ruff
      run: ruff format --diff --target-version=py39
      continue-on-error: true

    # Generating test reports (PyTest)
    - name: Test with pytest
      run: |
        pytest tests.py --doctest-modules \
                        --junitxml=junit/test-results-${{ matrix.python-version }}.xml \
                        --cov=com --cov-report=xml --cov-report=html

    # Uploading Pytest test results as artifacts
    - name: Upload pytest test results
      uses: actions/upload-artifact@v4
      with:
        name: pytest-results-${{ matrix.python-version }}
        path: junit/test-results-${{ matrix.python-version }}.xml
      if: ${{ always() }}
